{"hash":"4971f2bdf3a5022a419fa3a70720114982841feb","data":{"notes":{"title":"Uploading BearChat to Amazon EC2","content":"<p>This document will walk you through the process of setting up an Amazon EC2 instance and uploading your BearChat project without any previous configuration. This guide will only be concerned with setting up</p>\n<h3 id=\"setting-up-your-ec2-instance\"><a href=\"#setting-up-your-ec2-instance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Setting up your EC2 instance</h3>\n<p>If you already have an EC2 instance set up, you may partially or completely skip this section.</p>\n<ol>\n<li>Go to the AWS console. If you are logged into your AWS account, you can access it directly <a href=\"https://console.aws.amazon.com/console/home\" target rel=\"nofollow noopener noreferrer\">here</a>.</li>\n<li>Search \"EC2\" in the search bar and click on the \"EC2\" option in the dropdown. This should take you to the EC2 dashboard.</li>\n<li>On the right, click on \"Instances\" to view your instances. Then, click on the \"Launch instances\" to launch a new EC2 instance. Select Amazon Linux, then accept all default options.</li>\n<li>Launch your instance. You will be prompted to download and save a <code class=\"language-text\">.pem</code> file. This holds the credentials needed to connect to your EC2 instance. Keep this in a safe place.</li>\n<li>After you launch your instance, go back to the instances page and click on your newly created EC2 instance. Take note of this instance's <strong>VPC ID</strong>.</li>\n</ol>\n<h3 id=\"sshing-into-your-ec2-instance\"><a href=\"#sshing-into-your-ec2-instance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SSHing into your EC2 instance</h3>\n<p>Please follow the guide from the AWS docs: <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstances.html\" target rel=\"nofollow noopener noreferrer\">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstances.html</a></p>\n<p>If you having trouble connecting, make sure you are using the correct private key and logging in as the user <code class=\"language-text\">ec2-user</code> instead of <code class=\"language-text\">root</code>. If you are using PuTTY (Windows only), make sure you convert your <code class=\"language-text\">.pem</code> file to a <code class=\"language-text\">.ppk</code> file.</p>\n<h3 id=\"installing-docker-docker-compose-and-git\"><a href=\"#installing-docker-docker-compose-and-git\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Docker, docker-compose, and git</h3>\n<p>Amazon Linux uses <code class=\"language-text\">yum</code>. Instructions are adapted from <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html\" target rel=\"nofollow noopener noreferrer\">here</a>. Run the following commands to install Docker:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo yum update -y\nsudo amazon-linux-extras install docker\nsudo service docker start</code></pre></div>\n<p>Then relog (log out and log in), and verify that Docker is running by using the following command:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker info</code></pre></div>\n<p>In order to install docker-compose:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose</code></pre></div>\n<p>Verify success with:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker-compose version</code></pre></div>\n<p>In order to install git:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo yum install -y git</code></pre></div>\n<h3 id=\"uploading-bearchat\"><a href=\"#uploading-bearchat\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Uploading BearChat</h3>\n<p>Run <code class=\"language-text\">git clone</code> with your BearChat Github repository in a directory of your choosing.</p>\n<p>Due to <code class=\"language-text\">.gitignore</code>, some files (such as <code class=\"language-text\">.env</code> files) will not be uploaded. In this case, you can use <code class=\"language-text\">scp</code> in order to copy those files to your EC2 instance. Basic usage is:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scp local_file_name username@to_host:/remote/directory/</code></pre></div>\n","date":"2020-11-19"}},"context":{}}